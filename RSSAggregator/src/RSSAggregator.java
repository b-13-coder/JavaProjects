import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Bashir Ali
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.print("<title>");

        /**
         * creating tree with title tag as root node. If text child of title
         * exists, then print title.
         */
        XMLTree title = channel.child(getChildElement(channel, "title"));
        String titleLabel = "";
        if (title.numberOfChildren() > 0) {
            XMLTree titleTextChild = title.child(0);
            titleLabel = titleTextChild.label();
            out.print(titleLabel);
        }
        out.println("</title>");

        out.println("</head>");
        out.println("<body>");
        out.print("<h1>");

        // creating tree with link tag as root node and printing link
        XMLTree link = channel.child(getChildElement(channel, "link"));
        XMLTree linkTextChild = link.child(0);
        String linkLabel = linkTextChild.label();

        /**
         * if there is a text child of title, print title with the link
         * attached. if there is no text child of title, print the link as the
         * header with no title.
         */
        if (!titleLabel.equals("")) {
            out.print("<a href = " + "\"" + linkLabel + "\"" + "> " + titleLabel
                    + "</a>");
        } else {
            out.print("<a href = " + "\"" + linkLabel + "\"" + "> " + linkLabel
                    + "</a>");
        }
        out.println("</h1>");
        out.println("<p>");

        /**
         * creating tree with description tag as root node. If text child of
         * title exists, then print title
         */
        XMLTree description = channel
                .child(getChildElement(channel, "description"));
        String descriptionLabel = "";
        if (description.numberOfChildren() > 0) {
            XMLTree descriptionTextChild = description.child(0);
            descriptionLabel = descriptionTextChild.label();
            out.println(descriptionLabel);
        } else {
            out.println("No description available.");
        }

        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.print("</body>");
        out.print("<html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        /**
         * Check if pubDate exists, if it does, then print the pubDate text
         * child else, print no pubDate available
         */
        int pubDateIndex = getChildElement(item, "pubDate");
        String pubDate = "<td>No publishing date available</td>";
        if (pubDateIndex != -1) {
            pubDate = "<td>" + item.child(pubDateIndex).child(0).label()
                    + "</td>";
        }
        out.println(pubDate);

        /**
         * Check if source exists, if it does, create url string if source has
         * children, print hyperlink with source else, just print link else,
         * print no source avail.
         */
        int sourceIndex = getChildElement(item, "source");
        String source = "<td>No source available</td>";
        if (sourceIndex != -1) {
            String url = item.child(sourceIndex).attributeValue("url");
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                String titleLabel = item.child(sourceIndex).child(0).label();
                out.println("<td>" + "<a href = " + "\"" + url + "\"" + "> "
                        + titleLabel + "</a>" + "</td>");
            } else {
                out.println("<td>" + "<a href = " + "\"" + url + "\"" + "> "
                        + url + "</a>" + "</td>");
            }

        } else {
            out.println(source);
        }

        /**
         * Check if title or description exist and create a string if link
         * exists, print string with hyperlink else, print string
         */

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");

        String news = "";

        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            news = item.child(titleIndex).child(0).label();
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            news = item.child(descriptionIndex).child(0).label();
        }

        if (linkIndex != -1) {
            String link = item.child(linkIndex).child(0).label();
            out.println("<td>" + "<a href=\"" + link + "\">" + news + "</a>"
                    + "</td>");
        } else {
            out.println("<td>" + news + "</td>");
        }

        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree rss = new XMLTree1(url);
        SimpleWriter fileOut2 = new SimpleWriter1L(file);

        String version = "";
        if (rss.hasAttribute("version")) {
            version = rss.attributeValue("version");
        }

        if (rss.isTag() && version.equals("2.0")) {
            XMLTree channel = rss.child(0);
            outputHeader(channel, fileOut2);
            int i = 0;
            while (i < channel.numberOfChildren()) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileOut2);
                }

                i++;
            }
            outputFooter(fileOut2);
        }
        fileOut2.close();

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the name of an XML file: ");
        String xmlFile = in.nextLine();
        XMLTree xml = new XMLTree1(xmlFile);

        out.print("Enter the name of an HTML file: ");
        String html = in.nextLine();
        if (!html.endsWith(".html")) {
            html = html + ".html";
        }

        SimpleWriter fileOut = new SimpleWriter1L(html);

        fileOut.println("<html>");
        fileOut.println("<head>");
        fileOut.print("<title>");
        fileOut.print(xml.attributeValue("title"));
        fileOut.println("</title>");
        fileOut.println("</head>");
        fileOut.println("<body>");
        fileOut.print("<h2>");
        fileOut.print(xml.attributeValue("title"));
        fileOut.print("</h2>");
        fileOut.println("<ul>");

        /**
         * for loop goes through all children of input xml file and creates and
         * prints an html page. html page is linked on new home page
         */
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            fileOut.print("<li>");
            String url = xml.child(i).attributeValue("url");
            String file = xml.child(i).attributeValue("file");
            String name = xml.child(i).attributeValue("name");
            processFeed(url, file, out);
            fileOut.print(
                    "<a href = " + "\"" + file + "\"" + "> " + name + "</a>");
            fileOut.println("</li>");
        }

        fileOut.println("</ul>");
        fileOut.println("</body>");
        fileOut.println("</html>");

        in.close();
        out.close();
        fileOut.close();
    }

}
